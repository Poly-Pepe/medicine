pipeline {
    agent { label 'test-stand' }

    triggers { pollSCM('* * * * *') }
    options { timestamps() }

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials-id'
        DOCKER_IMAGE = 'binarybun/devops-app'
        ACTIVE_CONTAINER = ''
        NEW_CONTAINER = ''
    }

    stages {
        stage('Go version') {
            steps {
                echo "Go version..."
                sh 'go version'
            }
        }

        stage('Vet') {
            steps {
                echo "Running go vet..."
                sh 'go vet ./...'
            }
        }

        stage('Lint') {
            steps {
                echo "Running golangci-lint..."
                sh 'golangci-lint run ./... -v --config .golangci.yml'
            }
        }

        stage('Run Tests') {
            steps {
                echo "Running tests..."
                sh """
                go test -cover ./... -v
                """
            }
        }

        stage('Build') {
            steps {
                echo "Building Go application..."
                sh """
                CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o my-app ./app/main.go
                """
            }
        }

        stage('Trivy Scan: File System') {
            steps {
                echo "Running Trivy scan on filesystem..."
                sh """
                trivy fs --exit-code 1 --severity CRITICAL,HIGH,MEDIUM --no-progress .
                """
            }
        }

        stage('Trivy Scan: Docker Image') {
            steps {
                echo "Running Trivy scan on Docker image..."
                sh """
                docker build --build-arg APP_NAME=medicine -f ./ci/dockerfiles/api -t trivy-go-app .
                trivy image --exit-code 1 --severity CRITICAL,HIGH trivy-go-app
                """

                sh """
                docker rmi trivy-go-app:latest
                """
            }
        }

        stage('Check if Docker Image Changed') {
                    steps {
                        script {
                            def appVersion = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                            def latestImageTag = "${DOCKER_IMAGE}:latest"
                            def newImageTag = "${DOCKER_IMAGE}:${appVersion}"

                            echo "Checking if Docker image ${newImageTag} is different from ${latestImageTag} on Docker Hub"

                            withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                sh """
                                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                """
                            }

                            def latestImageExists = sh(script: "docker pull ${latestImageTag} || echo 'not_found'", returnStdout: true).trim()

                            if (latestImageExists.contains('not_found')) {
                                echo "Latest Docker image does not exist. Proceeding with build..."
                            } else {
                                echo "Comparing current image with latest..."

                                sh "docker build --build-arg APP_NAME=medicine -f ./ci/dockerfiles/api -t ${newImageTag} ."

                                def latestImageDigest = sh(script: "docker inspect --format='{{.Id}}' ${latestImageTag}", returnStdout: true).trim()
                                def newImageDigest = sh(script: "docker inspect --format='{{.Id}}' ${newImageTag}", returnStdout: true).trim()

                                if (latestImageDigest == newImageDigest) {
                                    echo "Current image is the same as the latest. Skipping push."
                                    currentBuild.result = 'SUCCESS'
                                    error("Image ${newImageTag} is the same as ${latestImageTag}, stopping further pipeline execution.")
                                } else {
                                    echo "Images are different. Proceeding with push."
                                }
                            }
                        }
                    }
                }

        stage('Build Docker Image') {
            when {
                expression { currentBuild.result != 'SUCCESS' }
            }
            steps {
                script {
                    def appVersion = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    def imageTag = "${DOCKER_IMAGE}:${appVersion}"

                    echo "Building Docker image with tag ${imageTag}"

                    sh "docker build --build-arg APP_NAME=medicine -f ./ci/dockerfiles/api -t ${imageTag} ."
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { currentBuild.result != 'SUCCESS' }
            }
            steps {
                script {
                    def appVersion = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    def imageTag = "${DOCKER_IMAGE}:${appVersion}"

                    echo "Pushing Docker image ${imageTag} to Docker Hub"

                    withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker push ${imageTag}
                        """
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    def appVersion = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    def imageTag = "${DOCKER_IMAGE}:${appVersion}"

                    sh "docker rmi ${imageTag}"
                }
            }
        }

        stage('Determine Active Container') {
            steps {
                script {
                    def result = sh(script: "docker ps --filter 'name=app_blue' --format '{{.ID}}'", returnStdout: true).trim()
                    ACTIVE_CONTAINER = result ? 'app_blue' : 'app_green'
                    echo "Active container: ${ACTIVE_CONTAINER}"
                }
            }
        }

        stage('Start New Container') {
            steps {
                script {
                    NEW_CONTAINER = (ACTIVE_CONTAINER == 'app_blue') ? 'app_green' : 'app_blue'
                    echo "Starting new container: ${NEW_CONTAINER}"

                    sh """
                        docker pull ${DOCKER_IMAGE}:latest
                        docker run -d --name ${NEW_CONTAINER} -p 8005:8004 ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Health Check New Container') {
            steps {
                script {
                    retry(3) {
                        sleep 5
                        sh 'curl -f http://localhost:8005 || exit 1'
                    }
                    echo "New container is running successfully."
                }
            }
        }

        stage('Switch Nginx to New Version') {
            steps {
                script {
                    sh """
                        sed -i 's/${ACTIVE_CONTAINER}/${NEW_CONTAINER}/g' /etc/nginx/conf.d/app.conf
                        nginx -s reload
                    """
                    echo "Nginx switched to ${NEW_CONTAINER}"
                }
            }
        }

        stage('Stop Old Container') {
            steps {
                script {
                    sh """
                        docker stop ${ACTIVE_CONTAINER}
                        docker rm ${ACTIVE_CONTAINER}
                    """
                    echo "Old container ${ACTIVE_CONTAINER} stopped and removed."
                }
            }
        }
    }

    post {
        always {
            sh "docker logout"
        }
    }
}
